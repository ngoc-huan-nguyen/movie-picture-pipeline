name: Frontend cd workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:
env:
  NODE_VERSION: '18.x'

jobs:
  install-build-test:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install, Build, Test
      run: |
        cd frontend
        npm ci
        npm run build --if-present
        npm test

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: install-build-test

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          REPOSITORY: ${{ secrets.FE_IMAGE_REPO_NAME }}
          REGION: ${{ secrets.REGION }}
          IMAGE_TAG: latest
        run: |
          cd frontend
          docker build -t $REPOSITORY:$IMAGE_TAG .
          docker tag $REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: [install-build-test, build-and-push-image]

    steps:
      - name: Use kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Config for EKS cluster
        env:
          REGION: ${{ secrets.REGION }}
          CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
        run: |
          aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
      
      - name: Deploy application to EKS
        run: |
          cd frontend/k8s
          kubectl apply -f kustomization.yaml